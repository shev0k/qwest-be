plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.3'
	id 'io.spring.dependency-management' version '1.1.4'
	id "org.sonarqube" version "4.4.1.3373"
	id 'jacoco'
}

group = 'com.qwest'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = JavaVersion.VERSION_17
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-security:'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.mockito:mockito-junit-jupiter:4.0.0'
	testImplementation 'org.mockito:mockito-core:4.0.0'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
	implementation 'org.mapstruct:mapstruct:1.4.2.Final'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'
	implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.0.3'
	implementation 'com.mysql:mysql-connector-j:8.3.0'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
}

test {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
}

jacocoTestReport {
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'**/mapper/**',
					'**/domain/geocoding/**',
					'**/BackendApplication.java',
					'**/domain/util/**',
					'**/exception/**',
					'**/domain/**'
			])
		}))
	}
	reports {
		xml.required = true
		html.required = true
	}
}


sonar {
	properties {
		property "sonar.qualitygate.wait", true
		property "sonar.projectKey", "com.qwest:qwest"
		property "sonar.projectName", "QWEST"
		property "sonar.gradle.skipCompile", "true"
		property "sonar.token", "squ_54c99063674cd9405c185b2fdfba122e97fe46e2"
		property "sonar.java.coveragePlugin", "jacoco"
		property "sonar.coverage.jacoco.xmlReportPaths", layout.buildDirectory.file("reports/jacoco/test/jacocoTestReport.xml").get().asFile.path
		property "sonar.coverage.exclusions", "**/mapper/**,**/domain/**,**/domain/geocoding/**,**/BackendApplication.java,**/domain/util/**,**/exception/**"
	}
}