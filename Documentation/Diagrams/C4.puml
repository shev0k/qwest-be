@startuml AuthorLevel4

class Author {
    -Long id
    -String passwordHash
    -String email
    -String firstName
    -String lastName
    -String username
    -String avatar
    -String country
    -String phoneNumber
    -String description
    -Integer count
    -Double starRating
    -AuthorRole role
    -Set<StayListing> stayListings
    +boolean canAcceptAuthors()
}

class AuthorDTO {
    -Long id
    -String password
    -String confirmPassword
    -String email
    -String firstName
    -String lastName
    -String username
    -String avatar
    -String country
    -String phoneNumber
    -String description
    -Integer count
    -Double starRating
    -String role
    -Set<Long> stayListingIds
    -String jwt
}

interface AuthorRepository {
    +Optional<Author> findById(Long)
    +List<Author> findAll()
    +Author save(Author)
    +void deleteById(Long)
    +Optional<Author> findByEmail(String)
}

interface AuthorMapper {
    +AuthorDTO toDto(Author)
    +Author toEntity(AuthorDTO)
}

interface AuthorService {
    +List<AuthorDTO> findAll()
    +Optional<AuthorDTO> findById(Long)
    +AuthorDTO update(Long, AuthorDTO)
    +Optional<AuthorDTO> findByEmail(String)
    +AuthorDTO save(AuthorDTO)
    +Optional<AuthorDTO> login(AuthorDTO)
    +void deleteById(Long)
}

class AuthorServiceImpl {
    -AuthorRepository authorRepository
    -AuthorMapper authorMapper
    -PasswordEncoder passwordEncoder
    -JwtUtil jwtUtil
    +List<AuthorDTO> findAll()
    +Optional<AuthorDTO> findById(Long)
    +AuthorDTO update(Long, AuthorDTO)
    +Optional<AuthorDTO> findByEmail(String)
    +AuthorDTO save(AuthorDTO)
    +Optional<AuthorDTO> login(AuthorDTO)
    +void deleteById(Long)
}

AuthorServiceImpl .down.> AuthorService : implements
AuthorServiceImpl --> AuthorRepository : uses
AuthorServiceImpl --> AuthorMapper : uses
AuthorServiceImpl --> PasswordEncoder : uses
AuthorServiceImpl --> JwtUtil : uses

Author "1" *-down- "0..*" StayListing : contains
Author o-up- AuthorDTO : data transfer object

@enduml
