@startuml QWESTComponentsLayer

!define RECTANGLE
!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

skinparam linetype polyline
skinparam linetype ortho

title Component Diagram for QWEST

package "Domain Models" {
    class Author {
        -Long id
        -String email
        -String firstName
        -String lastName
        -String username
        -String avatar
        -String country
        -String phoneNumber
        -String description
        -String passwordHash
        -AuthorRole role
        -Set<StayListing> stayListings
    }

    class Amenity {
        -Long id
        -String name
        -AmenityCategory category
    }

    class StayListing {
        -Long id
        -Author author
        -LocalDate date
        -String title
        -String featuredImage
        -List<GalleryImage> galleryImages
        -Double reviewStart
        -Integer reviewCount
        -String country
        -String street
        -String roomNumber
        -String city
        -String state
        -String postalCode
        -PropertyType propertyType
        -RentalFormType rentalFormType
        -Double acreage
        -Integer maxGuests
        -Integer bedrooms
        -Integer beds
        -Integer bathrooms
        -Integer kitchens
        -String checkInHours
        -String checkOutHours
        -List<String> specialRestrictions
        -String accommodationDescription
        -Double weekdayPrice
        -Double weekendPrice
        -Double longTermStayDiscount
        -Integer minimumNights
        -Integer maximumNights
        -Double lat
        -Double lng
        -Set<Amenity> amenities
        -List<BookingCalendar> bookingCalendar
    }

    class GalleryImage {
        -Long id
        -String imageUrl
        -StayListing stayListing
    }

    class BookingCalendar {
        -Long id
        -LocalDate date
        -Boolean isAvailable
        -StayListing stayListing
    }

    enum AmenityCategory {
        GENERAL_AMENITIES, ROOM_FEATURES, KITCHEN_DINING, BATHROOM_AMENITIES, LEISURE_RECREATION, ADDITIONAL_SERVICES, ENTERTAINMENT_OTHERS
    }

    enum AuthorRole {
        TRAVELER, HOST, FOUNDER
    }

    enum PropertyType {
        APARTMENT, HOTEL, CONDO, CABIN, TOWNHOUSE, PENTHOUSE, COTTAGE, BUNGALOW, LOFT
    }

    enum RentalFormType {
        ENTIRE_PLACE, PRIVATE_ROOM, HOTEL_ROOM, SHARED_ROOM
    }
}

package "Controllers" {
    class AuthorController {
        +getAllAuthors() : ResponseEntity<List<AuthorDTO>>
        +getAuthorById(Long) : ResponseEntity<?>
        +createAuthor(AuthorDTO) : ResponseEntity<AuthorDTO>
        +updateAuthor(Long, AuthorDTO) : ResponseEntity<AuthorDTO>
        +deleteAuthor(Long) : ResponseEntity<Void>
        +login(AuthorDTO) : ResponseEntity<AuthorDTO>
        +updateAuthorAvatar(Long, MultipartFile) : ResponseEntity<AuthorDTO>
    }

    class AmenityController {
        +createAmenity(AmenityDTO) : ResponseEntity<AmenityDTO>
        +getAllAmenities() : ResponseEntity<List<AmenityDTO>>
        +deleteAmenity(Long) : ResponseEntity<Void>
    }

    class StayListingController {
        +getAllStayListings() : ResponseEntity<List<StayListingDTO>>
        +getStayListingById(Long) : ResponseEntity<?>
        +createStayListing(StayListingDTO) : ResponseEntity<StayListingDTO>
        +updateStayListing(Long, StayListingDTO) : ResponseEntity<StayListingDTO>
        +deleteStayListing(Long) : ResponseEntity<Void>
    }

    class ImageUploadController {
        +uploadImage(MultipartFile) : ResponseEntity<String>
        +deleteImage(String) : ResponseEntity<String>
        +uploadMultipleImages(List<MultipartFile>) : ResponseEntity<List<String>>
    }

    class NotificationController {
        +createNotification(NotificationDTO) : ResponseEntity<NotificationDTO>
        +getNotificationsForAuthor(Long) : ResponseEntity<List<NotificationDTO>>
        +getAllNotifications() : ResponseEntity<List<NotificationDTO>>
        +deleteAllNotifications() : ResponseEntity<Void>
        +deleteNotificationsForAuthor(Long) : ResponseEntity<Void>
        +markNotificationAsRead(Long) : ResponseEntity<Void>
        +markNotificationsAsRead(List<Long>) : ResponseEntity<Void>
        +markAllNotificationsAsReadForAuthor(Long) : ResponseEntity<Void>
    }

    class ReservationController {
        +createReservation(ReservationDTO) : ResponseEntity<ReservationDTO>
        +getReservationById(Long) : ResponseEntity<?>
        +getReservationsByAuthorId(Long) : ResponseEntity<List<ReservationDTO>>
        +getReservationsByStayListingId(Long) : ResponseEntity<List<ReservationDTO>>
        +getAllReservations() : ResponseEntity<List<ReservationDTO>>
        +cancelReservation(Long) : ResponseEntity<ReservationDTO>
        +deleteCanceledReservations(Long) : ResponseEntity<Void>
    }

    class ReviewController {
        +createReview(ReviewDTO) : ResponseEntity<ReviewDTO>
        +updateReview(Long, ReviewDTO) : ResponseEntity<ReviewDTO>
        +deleteReview(Long) : ResponseEntity<Void>
        +getReviewsByStayListing(Long) : ResponseEntity<List<ReviewDTO>>
        +getAllReviews() : ResponseEntity<List<ReviewDTO>>
        +getReviewsByAuthor(Long) : ResponseEntity<List<ReviewDTO>>
        +getReviewsForAuthorStays(Long) : ResponseEntity<List<ReviewDTO>>
    }
}

package "Services" {
    interface AuthorService {
        +findAll() : List<AuthorDTO>
        +findById(Long) : Optional<AuthorDTO>
        +update(Long, AuthorDTO) : AuthorDTO
        +updateAvatar(Long, MultipartFile) : AuthorDTO
        +findByEmail(String) : Optional<AuthorDTO>
        +save(AuthorDTO) : AuthorDTO
        +login(AuthorDTO) : Optional<AuthorDTO>
        +deleteById(Long) : void
        +requestHostRole(Long) : AuthorDTO
        +approveHostRole(Long) : AuthorDTO
        +rejectHostRole(Long) : AuthorDTO
        +demoteToTraveler(Long) : AuthorDTO
    }

    interface AmenityService {
        +createAmenity(AmenityDTO) : AmenityDTO
        +deleteAmenity(Long) : void
        +getAllAmenities() : List<AmenityDTO>
    }

    interface StayListingService {
        +findByFilters(String, LocalDate, LocalDate, Integer, List<String>, Double, Double, Integer, Integer, Integer, List<String>, Pageable) : List<StayListingDTO>
        +findById(Long) : Optional<StayListingDTO>
        +save(StayListingDTO) : StayListingDTO
        +deleteById(Long) : void
    }

    interface NotificationService {
        +createNotification(NotificationDTO) : NotificationDTO
        +getNotificationsForAuthor(Long) : List<NotificationDTO>
        +getAllNotifications() : List<NotificationDTO>
        +deleteAllNotifications() : void
        +deleteNotificationsForAuthor(Long) : void
        +markNotificationAsRead(Long) : void
        +markNotificationsAsRead(List<Long>) : void
        +markAllNotificationsAsReadForAuthor(Long) : void
        +notifyHostRequest(Long) : void
        +notifyHostApproval(Long) : void
        +notifyHostRejection(Long) : void
        +notifyDemotionToTraveler(Long) : void
        +notifyStayReview(Long, Long, String, Long) : void
    }

    interface ReservationService {
        +createReservation(ReservationDTO) : ReservationDTO
        +findById(Long) : Optional<ReservationDTO>
        +findByAuthorId(Long) : List<ReservationDTO>
        +findByStayListingId(Long) : List<ReservationDTO>
        +findAll() : List<ReservationDTO>
        +cancelReservation(Long) : ReservationDTO
        +deleteCanceledReservationsByAuthorId(Long) : void
    }

    interface ReviewService {
        +save(ReviewDTO) : ReviewDTO
        +update(Long, ReviewDTO) : ReviewDTO
        +delete(Long) : void
        +getReviewsByStayListing(Long) : List<ReviewDTO>
        +getAllReviews() : List<ReviewDTO>
        +getReviewsByAuthor(Long) : List<ReviewDTO>
        +getReviewsForAuthorStays(Long) : List<ReviewDTO>
        +getTotalReviews(Long) : long
    }

    interface FileStorageService {
        +uploadFile(MultipartFile) : String
        +deleteFile(String) : void
    }

    class AuthorServiceImpl {
        -AuthorRepository authorRepository
        -AuthorMapper authorMapper
        -PasswordEncoder passwordEncoder
        -JwtUtil jwtUtil
        -FileStorageService fileStorageService
        -NotificationService notificationService
    }

    class AmenityServiceImpl {
        -AmenityRepository amenityRepository
        -AmenityMapper amenityMapper
    }

    class StayListingServiceImpl {
        -StayListingRepository stayListingRepository
        -AuthorRepository authorRepository
        -AmenityRepository amenityRepository
        -StayListingMapper stayListingMapper
    }

    class NotificationServiceImpl {
        -NotificationRepository notificationRepository
        -NotificationMapper notificationMapper
        -WebSocketNotificationService webSocketNotificationService
    }

    class ReservationServiceImpl {
        -ReservationRepository reservationRepository
        -StayListingService stayListingService
    }

    class ReviewServiceImpl {
        -ReviewRepository reviewRepository
        -NotificationService notificationService
        -StayListingService stayListingService
    }

    class S3FileStorageServiceImpl {
        -AmazonS3 s3Client
    }
}

package "Repositories" {
    interface AuthorRepository {
        +findByEmail(String) : Optional<Author>
        +findById(Long) : Optional<Author>
        +deleteById(Long) : void
        +findByRole(AuthorRole) : List<Author>
    }

    interface AmenityRepository {
        +findAll() : List<Amenity>
        +findById(Long) : Optional<Amenity>
        +deleteById(Long) : void
    }

    interface StayListingRepository {
        +findByFilters(String, LocalDate, LocalDate, Integer, List<String>, Double, Double, Integer, Integer, Integer, List<String>, Pageable) : List<StayListing>
        +findById(Long) : Optional<StayListing>
        +deleteById(Long) : void
    }

    interface NotificationRepository {
        +findByAuthorIdOrderByTimestampDesc(Long) : List<Notification>
        +markNotificationsAsRead(List<Long>) : void
        +markNotificationAsRead(Long) : void
        +deleteByAuthorId(Long) : void
    }

    interface ReservationRepository {
        +findByAuthorId(Long) : List<Reservation>
        +findByStayListingId(Long) : List<Reservation>
        +findByCancelledFalse() : List<Reservation>
        +findByAuthorIdAndCancelled(Long, boolean) : List<Reservation>
        +deleteByAuthorIdAndCancelledTrue(Long) : void
    }

    interface ReviewRepository {
        +findByStayListingId(Long) : List<Review>
        +findByAuthorId(Long) : List<Review>
        +findByStayListingAuthorId(Long) : List<Review>
        +countByStayListingId(Long) : long
    }
}

together {
    AuthorController --|> AuthorService : uses
    AmenityController --|> AmenityService : uses
    StayListingController --|> StayListingService : uses
    ImageUploadController --|> FileStorageService : uses
    NotificationController --|> NotificationService : uses
    ReservationController --|> ReservationService : uses
    ReviewController --|> ReviewService : uses

    AuthorServiceImpl --|> AuthorRepository : uses
    AuthorServiceImpl --|> AuthorMapper : uses
    AuthorServiceImpl --|> PasswordEncoder : uses
    AuthorServiceImpl --|> JwtUtil : uses
    AuthorServiceImpl --|> FileStorageService : uses
    AuthorServiceImpl --|> NotificationService : uses

    AmenityServiceImpl --|> AmenityRepository : uses
    AmenityServiceImpl --|> AmenityMapper : uses

    StayListingServiceImpl --|> StayListingRepository : uses
    StayListingServiceImpl --|> AuthorRepository : uses
    StayListingServiceImpl --|> AmenityRepository : uses
    StayListingServiceImpl --|> StayListingMapper : uses

    NotificationServiceImpl --|> NotificationRepository : uses
    NotificationServiceImpl --|> NotificationMapper : uses
    NotificationServiceImpl --|> WebSocketNotificationService : uses

    ReservationServiceImpl --|> ReservationRepository : uses
    ReservationServiceImpl --|> StayListingService : uses

    ReviewServiceImpl --|> ReviewRepository : uses
    ReviewServiceImpl --|> NotificationService : uses
    ReviewServiceImpl --|> StayListingService : uses

    Author "1" -- "0..*" StayListing : creates
    StayListing "0..*" -- "1" Author : belongs to
    StayListing "0..*" -- "0..*" GalleryImage : has
    GalleryImage "1" -- "1" StayListing : belongs to
    StayListing "0..*" -- "0..*" BookingCalendar : includes
    BookingCalendar "1" -- "1" StayListing : belongs to
    StayListing "0..*" -- "0..*" Amenity : includes
    Amenity "0..*" -- "0..*" StayListing : part of
    StayListing "0..*" -- "0..*" Reservation : reserved by
    Reservation "1" -- "1" StayListing : reserves
    Reservation "1" -- "1" Author : made by
    Author "1" -- "0..*" Reservation : makes
    Review "1" -- "1" StayListing : about
    Review "1" -- "1" Author : written by
    StayListing "0..*" -- "0..*" Review : has
    Author "1" -- "0..*" Review : writes
    Notification "1" -- "1" Author : belongs to
    Notification "1" -- "1" Author : sent by
    Notification "0..*" -- "0..*" StayListing : related to
    StayListing "0..*" -- "0..*" Notification : generates


    S3FileStorageServiceImpl --|> AmazonS3 : uses
}

@enduml
