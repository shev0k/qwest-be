@startuml AuthorManagement

!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

skinparam linetype ortho

title Author Management Component Diagram for QWEST

package "Domain Models" {
    class Author {
        -Long id
        -String email
        -String firstName
        -String lastName
        -String username
        -String avatar
        -String country
        -String phoneNumber
        -String description
        -String passwordHash
        -AuthorRole role
        -Set<StayListing> stayListings
        -Set<StayListing> wishlist
    }

    class StayListing {
        -Long id
        -Author author
        -LocalDate date
        -String title
        -String featuredImage
        -List<GalleryImage> galleryImages
        -Double reviewStart
        -Integer reviewCount
        -String country
        -String street
        -String roomNumber
        -String city
        -String state
        -String postalCode
        -PropertyType propertyType
        -RentalFormType rentalFormType
        -Double acreage
        -Integer maxGuests
        -Integer bedrooms
        -Integer beds
        -Integer bathrooms
        -Integer kitchens
        -String checkInHours
        -String checkOutHours
        -List<String> specialRestrictions
        -String accommodationDescription
        -Double weekdayPrice
        -Double weekendPrice
        -Double longTermStayDiscount
        -Integer minimumNights
        -Integer maximumNights
        -Double lat
        -Double lng
        -Set<Amenity> amenities
        -List<BookingCalendar> bookingCalendar
        -Set<Author> likedByAuthors
    }

    enum AuthorRole {
        TRAVELER, HOST, FOUNDER, PENDING_HOST
    }
}

package "Controllers" {
    class AuthorController {
        +getAllAuthors() : ResponseEntity<List<AuthorDTO>>
        +getAuthorById(Long) : ResponseEntity<?>
        +createAuthor(AuthorDTO) : ResponseEntity<AuthorDTO>
        +updateAuthor(Long, AuthorDTO) : ResponseEntity<AuthorDTO>
        +deleteAuthor(Long) : ResponseEntity<Void>
        +login(AuthorDTO) : ResponseEntity<AuthorDTO>
        +updateAuthorAvatar(Long, MultipartFile) : ResponseEntity<AuthorDTO>
        +resetPassword(PasswordResetDTO) : ResponseEntity<Void>
        +addStayToWishlist(Long, Long) : ResponseEntity<AuthorDTO>
        +removeStayFromWishlist(Long, Long) : ResponseEntity<AuthorDTO>
        +getWishlistedStays(Long) : ResponseEntity<List<StayListingDTO>>
        +getStayListingsByAuthorId(Long) : ResponseEntity<List<StayListingDTO>>
        +requestHostRole(Long) : ResponseEntity<AuthorDTO>
        +approveHostRole(Long) : ResponseEntity<AuthorDTO>
        +rejectHostRole(Long) : ResponseEntity<AuthorDTO>
        +demoteToTraveler(Long) : ResponseEntity<AuthorDTO>
    }
}

package "Services" {
    interface AuthorService {
        +findAll() : List<AuthorDTO>
        +findById(Long) : Optional<AuthorDTO>
        +update(Long, AuthorDTO) : AuthorDTO
        +updateAvatar(Long, MultipartFile) : AuthorDTO
        +findByEmail(String) : Optional<AuthorDTO>
        +save(AuthorDTO) : AuthorDTO
        +login(AuthorDTO) : Optional<AuthorDTO>
        +deleteById(Long) : void
        +resetPassword(PasswordResetDTO) : void
        +addStayToWishlist(Long, Long) : AuthorDTO
        +removeStayFromWishlist(Long, Long) : AuthorDTO
        +getWishlistedStays(Long) : List<StayListingDTO>
        +getStayListingsByAuthorId(Long) : List<StayListingDTO>
        +requestHostRole(Long) : AuthorDTO
        +approveHostRole(Long) : AuthorDTO
        +rejectHostRole(Long) : AuthorDTO
        +demoteToTraveler(Long) : AuthorDTO
    }

    class AuthorServiceImpl {
        -AuthorRepository authorRepository
        -AuthorMapper authorMapper
        -PasswordEncoder passwordEncoder
        -JwtUtil jwtUtil
        -FileStorageService fileStorageService
        -NotificationService notificationService
        -StayListingRepository stayListingRepository
    }
}

package "Repositories" {
    interface AuthorRepository {
        +findByEmail(String) : Optional<Author>
        +findById(Long) : Optional<Author>
        +deleteById(Long) : void
    }

    interface StayListingRepository {
        +findAll() : List<StayListing>
        +findById(Long) : Optional<StayListing>
        +deleteById(Long) : void
        +findByAuthorId(Long) : List<StayListing>
    }
}

package "External Systems" {
    interface FileStorageService {
        +uploadFile(MultipartFile) : String
        +deleteFile(String) : void
    }

    interface NotificationService {
        +notifyHostRequest(Long) : void
        +notifyHostApproval(Long) : void
        +notifyHostRejection(Long) : void
        +notifyDemotionToTraveler(Long) : void
    }
}

together {
    AuthorController --> AuthorService : uses
    AuthorServiceImpl --> AuthorRepository : uses
    AuthorServiceImpl --> AuthorMapper : uses
    AuthorServiceImpl --> PasswordEncoder : uses
    AuthorServiceImpl --> JwtUtil : uses
    AuthorServiceImpl --> FileStorageService : uses
    AuthorServiceImpl --> NotificationService : uses
    AuthorServiceImpl --> StayListingRepository : uses

    Author --> StayListing : owns
    StayListing --> Author : references

    AuthorController --> Author : manages
    AuthorService --> Author : manages
    AuthorRepository --> Author : manages

    AuthorService --> StayListing : manages
    StayListingRepository --> StayListing : manages
}

@enduml
